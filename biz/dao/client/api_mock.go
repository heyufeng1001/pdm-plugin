// Code generated by MockGen. DO NOT EDIT.
// Source: pdm-plugin.github.com/biz/dao/client (interfaces: IDataClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDataClient is a mock of IDataClient interface.
type MockIDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDataClientMockRecorder
}

// MockIDataClientMockRecorder is the mock recorder for MockIDataClient.
type MockIDataClientMockRecorder struct {
	mock *MockIDataClient
}

// NewMockIDataClient creates a new mock instance.
func NewMockIDataClient(ctrl *gomock.Controller) *MockIDataClient {
	mock := &MockIDataClient{ctrl: ctrl}
	mock.recorder = &MockIDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataClient) EXPECT() *MockIDataClientMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockIDataClient) BatchCreate(arg0 context.Context, arg1 *BatchCreateParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockIDataClientMockRecorder) BatchCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockIDataClient)(nil).BatchCreate), arg0, arg1)
}

// BatchDelete mocks base method.
func (m *MockIDataClient) BatchDelete(arg0 context.Context, arg1 *BatchDeleteParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockIDataClientMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockIDataClient)(nil).BatchDelete), arg0, arg1)
}

// BatchUpdate mocks base method.
func (m *MockIDataClient) BatchUpdate(arg0 context.Context, arg1 *BatchUpdateParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockIDataClientMockRecorder) BatchUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockIDataClient)(nil).BatchUpdate), arg0, arg1)
}

// Create mocks base method.
func (m *MockIDataClient) Create(arg0 context.Context, arg1 *CreateParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIDataClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDataClient)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIDataClient) Get(arg0 context.Context, arg1 *GetParam) (GetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(GetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIDataClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDataClient)(nil).Get), arg0, arg1)
}

// Query mocks base method.
func (m *MockIDataClient) Query(arg0 context.Context, arg1 *QueryParam) (QueryResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(QueryResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIDataClientMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDataClient)(nil).Query), arg0, arg1)
}

// Update mocks base method.
func (m *MockIDataClient) Update(arg0 context.Context, arg1 *UpdateParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDataClientMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDataClient)(nil).Update), arg0, arg1)
}
